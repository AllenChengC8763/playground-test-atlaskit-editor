{"version":3,"sources":["../node_modules/@atlaskit/editor-common/utils/imageLoader.js","../node_modules/@atlaskit/renderer/ui/MediaCard.js","../node_modules/@atlaskit/adf-utils/dist/es2015/traverse/filter.js","../node_modules/@atlaskit/renderer/react/nodes/media.js"],"names":["Wrapped","mediaIdentifierMap","Map","MediaCard_getListOfIdentifiersFromDoc","doc","adf","callback","result","Object","traverse","any","node","push","filter","type","reduce","identifierList","mediaNode","attrs","_a","dataURI","url","id","mediaItemType","name","MediaCard_MediaCardInternal","_super","MediaCardInternal","_this","apply","this","arguments","state","renderLoadingCard","cardDimensions","props","react","media_card","dimensions","getOnCardClickCallback","isInlinePlayer","eventHandlers","media","onClick","analyticsEvent","isVideo","mediaItemDetails","mediaType","tslib_es6","prototype","componentDidMount","rendererContext","mediaProvider","collectionName","context","nodeIsInCache","_b","label","collection","sent","viewContext","has","adDoc","forEach","identifier","set","setState","componentWillUnmount","delete","renderExternal","shouldOpenMediaViewer","resizeMode","appearance","imageStatus","disableOverlay","mediaViewerDataSource","list","Array","from","values","render","occurrenceKey","rendererAppearance","useInlinePlayer","isMobile","undefined","onCardClick","isLazy","MediaCard","WithImageLoader","onLoad","onExternalImageLoaded","img","width","naturalWidth","height","naturalHeight","onError","fetchImage","componentWillReceiveProps","nextProps","removeEventListener","Image","addEventListener","src","media_Media","Media","renderCard","providers","withProviders","providerFactory","renderNode","__webpack_exports__"],"mappings":"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","file":"static/js/@atlaskit-internal-renderer-node_Media.85b87050.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Component } from 'react';\nexport var withImageLoader = function withImageLoader(Wrapped) {\n  return (\n    /** @class */\n    function (_super) {\n      tslib_1.__extends(WithImageLoader, _super);\n\n      function WithImageLoader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.state = {\n          imageStatus: 'loading'\n        };\n\n        _this.onLoad = function () {\n          _this.setState({\n            imageStatus: 'complete'\n          });\n\n          var onExternalImageLoaded = _this.props.onExternalImageLoaded;\n\n          if (onExternalImageLoaded && _this.img) {\n            onExternalImageLoaded({\n              width: _this.img.naturalWidth,\n              height: _this.img.naturalHeight\n            });\n          }\n        };\n\n        _this.onError = function () {\n          _this.setState({\n            imageStatus: 'error'\n          });\n        };\n\n        return _this;\n      }\n\n      WithImageLoader.prototype.componentDidMount = function () {\n        this.fetchImage(this.props);\n      };\n\n      WithImageLoader.prototype.componentWillReceiveProps = function (nextProps) {\n        if (nextProps.url !== this.props.url) {\n          this.setState({\n            imageStatus: 'loading'\n          });\n          this.fetchImage(nextProps);\n        }\n      };\n\n      WithImageLoader.prototype.componentWillUnmount = function () {\n        if (this.img) {\n          this.img.removeEventListener('load', this.onLoad);\n          this.img.removeEventListener('error', this.onError);\n          this.img = null;\n        }\n      };\n\n      WithImageLoader.prototype.fetchImage = function (_a) {\n        var url = _a.url;\n\n        if (url) {\n          if (!this.img) {\n            this.img = new Image();\n            this.img.addEventListener('load', this.onLoad);\n            this.img.addEventListener('error', this.onError);\n          }\n\n          this.img.src = url;\n        }\n      };\n\n      WithImageLoader.prototype.render = function () {\n        var imageStatus = this.state.imageStatus;\n        return React.createElement(Wrapped, tslib_1.__assign({}, this.props, {\n          imageStatus: imageStatus\n        }));\n      };\n\n      return WithImageLoader;\n    }(Component)\n  );\n};","import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { filter } from '@atlaskit/adf-utils';\nimport { Card, CardLoading, CardError } from '@atlaskit/media-card';\nimport { withImageLoader } from '@atlaskit/editor-common';\nvar mediaIdentifierMap = new Map();\nexport var getListOfIdentifiersFromDoc = function getListOfIdentifiersFromDoc(doc) {\n  if (!doc) {\n    return [];\n  }\n\n  return filter(doc, function (node) {\n    return node.type === 'media';\n  }).reduce(function (identifierList, mediaNode) {\n    if (mediaNode.attrs) {\n      var _a = mediaNode.attrs,\n          type = _a.type,\n          dataURI = _a.url,\n          id = _a.id;\n\n      if (type === 'file' && id) {\n        identifierList.push({\n          mediaItemType: 'file',\n          id: id\n        });\n      } else if (type === 'external' && dataURI) {\n        identifierList.push({\n          mediaItemType: 'external-image',\n          dataURI: dataURI,\n          name: dataURI\n        });\n      }\n    }\n\n    return identifierList;\n  }, []);\n};\n\nvar MediaCardInternal =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MediaCardInternal, _super);\n\n  function MediaCardInternal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n\n    _this.renderLoadingCard = function () {\n      var cardDimensions = _this.props.cardDimensions;\n      return React.createElement(CardLoading, {\n        dimensions: cardDimensions\n      });\n    };\n    /**\n     * We want to call provided `eventHandlers.media.onClick` when it's provided,\n     * but we also don't want to call it when it's a video and inline video player is enabled.\n     * This is due to consumers normally process this onClick call by opening media viewer and\n     * we don't want that to happened described above text.\n     */\n\n\n    _this.getOnCardClickCallback = function (isInlinePlayer) {\n      var eventHandlers = _this.props.eventHandlers;\n\n      if (eventHandlers && eventHandlers.media && eventHandlers.media.onClick) {\n        return function (result, analyticsEvent) {\n          var isVideo = result.mediaItemDetails && result.mediaItemDetails.mediaType === 'video';\n          var isVideoWithInlinePlayer = isInlinePlayer && isVideo;\n\n          if (!isVideoWithInlinePlayer && eventHandlers && eventHandlers.media && eventHandlers.media.onClick) {\n            eventHandlers.media.onClick(result, analyticsEvent);\n          }\n        };\n      }\n\n      return undefined;\n    };\n\n    return _this;\n  }\n\n  MediaCardInternal.prototype.componentDidMount = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, rendererContext, mediaProvider, id, url, collectionName, provider, context, nodeIsInCache;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.props, rendererContext = _a.rendererContext, mediaProvider = _a.mediaProvider, id = _a.id, url = _a.url, collectionName = _a.collection;\n\n            if (!mediaProvider) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , mediaProvider];\n\n          case 1:\n            provider = _b.sent();\n            return [4\n            /*yield*/\n            , provider.viewContext];\n\n          case 2:\n            context = _b.sent();\n            nodeIsInCache = id && mediaIdentifierMap.has(id) || url && mediaIdentifierMap.has(url);\n\n            if (rendererContext && rendererContext.adDoc && !nodeIsInCache) {\n              getListOfIdentifiersFromDoc(rendererContext.adDoc).forEach(function (identifier) {\n                if (identifier.mediaItemType === 'file') {\n                  mediaIdentifierMap.set(identifier.id, tslib_1.__assign({}, identifier, {\n                    collectionName: collectionName\n                  }));\n                } else if (identifier.mediaItemType === 'external-image') {\n                  mediaIdentifierMap.set(identifier.dataURI, identifier);\n                }\n              });\n            }\n\n            this.setState({\n              context: context\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MediaCardInternal.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        id = _a.id,\n        dataURI = _a.url;\n\n    if (id) {\n      mediaIdentifierMap.delete(id);\n    } else if (dataURI) {\n      mediaIdentifierMap.delete(dataURI);\n    }\n  };\n\n  MediaCardInternal.prototype.renderExternal = function (shouldOpenMediaViewer) {\n    var context = this.state.context;\n    var _a = this.props,\n        cardDimensions = _a.cardDimensions,\n        resizeMode = _a.resizeMode,\n        appearance = _a.appearance,\n        url = _a.url,\n        imageStatus = _a.imageStatus,\n        disableOverlay = _a.disableOverlay;\n\n    if (imageStatus === 'loading' || !url) {\n      return this.renderLoadingCard();\n    }\n\n    var identifier = {\n      dataURI: url,\n      name: url,\n      mediaItemType: 'external-image'\n    };\n    return React.createElement(Card, {\n      context: context,\n      identifier: identifier,\n      dimensions: cardDimensions,\n      appearance: appearance,\n      resizeMode: resizeMode,\n      disableOverlay: disableOverlay,\n      shouldOpenMediaViewer: shouldOpenMediaViewer,\n      mediaViewerDataSource: {\n        list: Array.from(mediaIdentifierMap.values())\n      }\n    });\n  };\n\n  MediaCardInternal.prototype.render = function () {\n    var context = this.state.context;\n    var _a = this.props,\n        id = _a.id,\n        type = _a.type,\n        collection = _a.collection,\n        occurrenceKey = _a.occurrenceKey,\n        cardDimensions = _a.cardDimensions,\n        resizeMode = _a.resizeMode,\n        rendererAppearance = _a.rendererAppearance,\n        disableOverlay = _a.disableOverlay,\n        useInlinePlayer = _a.useInlinePlayer;\n    var isMobile = rendererAppearance === 'mobile';\n    var shouldPlayInline = useInlinePlayer !== undefined ? useInlinePlayer : true;\n    var isInlinePlayer = isMobile ? false : shouldPlayInline;\n    var onCardClick = this.getOnCardClickCallback(isInlinePlayer);\n    var shouldOpenMediaViewer = !isMobile && !onCardClick;\n\n    if (type === 'external') {\n      return this.renderExternal(shouldOpenMediaViewer);\n    }\n\n    if (type === 'link') {\n      return null;\n    }\n\n    if (!context || !id) {\n      return this.renderLoadingCard();\n    }\n\n    if (!id || type !== 'file') {\n      return React.createElement(CardError, {\n        dimensions: cardDimensions\n      });\n    }\n\n    var identifier = {\n      id: id,\n      mediaItemType: 'file',\n      collectionName: collection,\n      occurrenceKey: occurrenceKey\n    };\n    return React.createElement(Card, {\n      identifier: identifier,\n      context: context,\n      dimensions: cardDimensions,\n      onClick: onCardClick,\n      resizeMode: resizeMode,\n      isLazy: !isMobile,\n      disableOverlay: disableOverlay,\n      useInlinePlayer: isInlinePlayer,\n      shouldOpenMediaViewer: shouldOpenMediaViewer,\n      mediaViewerDataSource: {\n        list: Array.from(mediaIdentifierMap.values())\n      }\n    });\n  };\n\n  return MediaCardInternal;\n}(Component);\n\nexport { MediaCardInternal };\nexport var MediaCard = withImageLoader(MediaCardInternal);","import { traverse } from './traverse';\nexport function filter(adf, callback) {\n  var result = [];\n  traverse(adf, {\n    any: function any(node) {\n      if (callback(node)) {\n        result.push(node);\n      }\n    }\n  });\n  return result;\n}","import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { PureComponent } from 'react';\nimport { WithProviders } from '@atlaskit/editor-common';\nimport { MediaCard } from '../../ui/MediaCard';\n\nvar Media =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Media, _super);\n\n  function Media() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderCard = function (providers) {\n      if (providers === void 0) {\n        providers = {};\n      }\n\n      var mediaProvider = providers.mediaProvider;\n      return React.createElement(MediaCard, tslib_1.__assign({\n        mediaProvider: mediaProvider\n      }, _this.props));\n    };\n\n    return _this;\n  }\n\n  Media.prototype.render = function () {\n    var providers = this.props.providers;\n\n    if (!providers) {\n      return this.renderCard();\n    }\n\n    return React.createElement(WithProviders, {\n      providers: ['mediaProvider'],\n      providerFactory: providers,\n      renderNode: this.renderCard\n    });\n  };\n\n  return Media;\n}(PureComponent);\n\nexport default Media;"],"sourceRoot":""}