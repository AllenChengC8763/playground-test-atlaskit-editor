{"version":3,"sources":["../node_modules/@atlaskit/emoji/components/common/ResourcedEmojiComponent.js"],"names":["__webpack_require__","r","__webpack_exports__","tslib__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_util_constants__WEBPACK_IMPORTED_MODULE_3__","_util_type_helpers__WEBPACK_IMPORTED_MODULE_4__","_CachingEmoji__WEBPACK_IMPORTED_MODULE_5__","_EmojiPlaceholder__WEBPACK_IMPORTED_MODULE_6__","ResourcedEmojiComponent","_super","props","_this","call","this","ready","state","emoji","undefined","loaded","prototype","getChildContext","emojiProvider","refreshEmoji","emojiId","foundEmoji","findByEmojiId","Object","setState","then","componentWillMount","componentWillUnmount","componentWillReceiveProps","nextProps","render","_a","_b","fitToHeight","showTooltip","_c","shortName","fallback","emojiWrapper","size","element","id","data-emoji-id","data-emoji-short-name","data-emoji-text","childContextTypes"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,IAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KASAU,EAEA,SAAAC,GAGA,SAAAD,EAAAE,GACA,IAAAC,EAAAF,EAAAG,KAAAC,KAAAH,IAAAG,KAOA,OALAF,EAAAG,OAAA,EACAH,EAAAI,MAAA,CACAC,WAAAC,EACAC,QAAA,GAEAP,EAuGA,OAjHEV,EAAA,UAAiBO,EAAAC,GAanBD,EAAAW,UAAAC,gBAAA,WACA,OACAJ,MAAA,CACAK,cAAAR,KAAAH,MAAAW,iBAKAb,EAAAW,UAAAG,aAAA,SAAAD,EAAAE,GACA,IAAAZ,EAAAE,KAEAW,EAAAH,EAAAI,cAAAF,GAEQG,OAAArB,EAAA,EAAAqB,CAASF,IACjBX,KAAAc,SAAA,CACAT,QAAA,IAEAM,EAAAI,KAAA,SAAAZ,GACAL,EAAAG,OAEAH,EAAAgB,SAAA,CACAX,QACAE,QAAA,OAMAL,KAAAc,SAAA,CACAX,MAAAQ,EACAN,QAAA,KAKAV,EAAAW,UAAAU,mBAAA,WACAhB,KAAAC,OAAA,EAEAD,KAAAE,MAAAC,OAGAH,KAAAS,aAAAT,KAAAH,MAAAW,cAAAR,KAAAH,MAAAa,UAIAf,EAAAW,UAAAW,qBAAA,WACAjB,KAAAC,OAAA,GAGAN,EAAAW,UAAAY,0BAAA,SAAAC,GACAA,EAAAX,gBAAAR,KAAAH,MAAAW,eAAAW,EAAAT,UAAAV,KAAAH,MAAAa,SACAV,KAAAS,aAAAU,EAAAX,cAAAW,EAAAT,UAIAf,EAAAW,UAAAc,OAAA,WACA,IAAAC,EAAArB,KAAAH,MACAa,EAAAW,EAAAX,QACAY,EAAAD,EAAAE,YACAA,OAAA,IAAAD,EAAsC/B,EAAA,EAAkB+B,EACxDE,EAAAH,EAAAG,YACAC,EAAAzB,KAAAE,MACAC,EAAAsB,EAAAtB,MACAE,EAAAoB,EAAApB,OACAqB,EAAAhB,EAAAgB,UACAC,EAAAjB,EAAAiB,SAEA,OAAAxB,EACAH,KAAA4B,aAA+BtC,EAAA,cAAoBG,EAAA,EAAY,CAC/DU,QACAqB,cACAD,iBAEKlB,EAELL,KAAA4B,aAA+BtC,EAAA,cAAmB,YAAAqC,GAAAD,IAGlD1B,KAAA4B,aAA6BtC,EAAA,cAAoBI,EAAA,EAAgB,CACjEgC,YACAF,cACAK,KAAAN,GAA2BhC,EAAA,MAI3BI,EAAAW,UAAAsB,aAAA,SAAAE,GACA,IAAAT,EAAArB,KAAAH,MAAAa,QACAgB,EAAAL,EAAAK,UACAK,EAAAV,EAAAU,GACAJ,EAAAN,EAAAM,SACA,OAAWrC,EAAA,cAAmB,QAC9B0C,gBAAAD,EACAE,wBAAAP,EACAQ,kBAAAP,GAAAD,GACKI,IAGLnC,EAAAwC,kBAAA,CACAhC,MAAWd,EAAA,QAEXM,EAlHA,CAmHEL,EAAA,WAEaH,EAAA","file":"static/js/@atlaskit-internal_resourcedEmojiComponent.406a7704.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { defaultEmojiHeight } from '../../util/constants';\nimport { isPromise } from '../../util/type-helpers';\nimport CachingEmoji from './CachingEmoji';\nimport EmojiPlaceholder from './EmojiPlaceholder';\n\nvar ResourcedEmojiComponent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ResourcedEmojiComponent, _super);\n\n  function ResourcedEmojiComponent(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.ready = false;\n    _this.state = {\n      emoji: undefined,\n      loaded: false\n    };\n    return _this;\n  }\n\n  ResourcedEmojiComponent.prototype.getChildContext = function () {\n    return {\n      emoji: {\n        emojiProvider: this.props.emojiProvider\n      }\n    };\n  };\n\n  ResourcedEmojiComponent.prototype.refreshEmoji = function (emojiProvider, emojiId) {\n    var _this = this;\n\n    var foundEmoji = emojiProvider.findByEmojiId(emojiId);\n\n    if (isPromise(foundEmoji)) {\n      this.setState({\n        loaded: false\n      });\n      foundEmoji.then(function (emoji) {\n        if (_this.ready) {\n          // don't update state if component was unmounted\n          _this.setState({\n            emoji: emoji,\n            loaded: true\n          });\n        }\n      });\n    } else {\n      // loaded\n      this.setState({\n        emoji: foundEmoji,\n        loaded: true\n      });\n    }\n  };\n\n  ResourcedEmojiComponent.prototype.componentWillMount = function () {\n    this.ready = true;\n\n    if (!this.state.emoji) {\n      // using componentWillMount instead of componentDidMount to avoid needless\n      // rerendering.\n      this.refreshEmoji(this.props.emojiProvider, this.props.emojiId);\n    }\n  };\n\n  ResourcedEmojiComponent.prototype.componentWillUnmount = function () {\n    this.ready = false;\n  };\n\n  ResourcedEmojiComponent.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.emojiProvider !== this.props.emojiProvider || nextProps.emojiId !== this.props.emojiId) {\n      this.refreshEmoji(nextProps.emojiProvider, nextProps.emojiId);\n    }\n  };\n\n  ResourcedEmojiComponent.prototype.render = function () {\n    var _a = this.props,\n        emojiId = _a.emojiId,\n        _b = _a.fitToHeight,\n        fitToHeight = _b === void 0 ? defaultEmojiHeight : _b,\n        showTooltip = _a.showTooltip;\n    var _c = this.state,\n        emoji = _c.emoji,\n        loaded = _c.loaded;\n    var shortName = emojiId.shortName,\n        fallback = emojiId.fallback;\n\n    if (emoji) {\n      return this.emojiWrapper(React.createElement(CachingEmoji, {\n        emoji: emoji,\n        showTooltip: showTooltip,\n        fitToHeight: fitToHeight\n      }));\n    } else if (loaded) {\n      // loaded but not found - render fallback\n      return this.emojiWrapper(React.createElement(\"span\", null, fallback || shortName));\n    }\n\n    return this.emojiWrapper(React.createElement(EmojiPlaceholder, {\n      shortName: shortName,\n      showTooltip: showTooltip,\n      size: fitToHeight || defaultEmojiHeight\n    }));\n  };\n\n  ResourcedEmojiComponent.prototype.emojiWrapper = function (element) {\n    var _a = this.props.emojiId,\n        shortName = _a.shortName,\n        id = _a.id,\n        fallback = _a.fallback;\n    return React.createElement(\"span\", {\n      \"data-emoji-id\": id,\n      \"data-emoji-short-name\": shortName,\n      \"data-emoji-text\": fallback || shortName\n    }, element);\n  };\n\n  ResourcedEmojiComponent.childContextTypes = {\n    emoji: PropTypes.object\n  };\n  return ResourcedEmojiComponent;\n}(Component);\n\nexport default ResourcedEmojiComponent;"],"sourceRoot":""}