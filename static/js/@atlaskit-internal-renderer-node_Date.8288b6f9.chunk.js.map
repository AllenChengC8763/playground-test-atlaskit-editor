{"version":3,"sources":["../node_modules/@atlaskit/editor-common/utils/date.js","../node_modules/@atlaskit/renderer/react/nodes/date.js"],"names":["addLeadingZero","val","months","week_days","timestampToString","timestamp","pattern","date","Date","Number","getUTCDay","getUTCDate","getUTCMonth","getUTCFullYear","timestampToIsoFormat","date_isPastDate","is_before_default","valueOf","date_timestampToTaskContext","curDate","givenDate","distance","difference_in_calendar_days_default","sameYear","date_Date","_super","apply","this","arguments","tslib_es6","prototype","render","_a","props","parentIsIncompleteTask","className","react","data-node-type","data-timestamp","__webpack_exports__"],"mappings":"yJAqBAA,EAAA,SAAAC,GACA,OAAAA,EAAA,GACA,IAAAA,EAGAA,GAGAC,EAAA,0EACAC,EAAA,4CAEOC,EAAA,SAAAC,EAAAC,GACP,IAAAC,EAAA,IAAAC,KAAAC,OAAAJ,IAEA,OAAAC,GACA,kBACA,OAAAH,EAAAI,EAAAG,aAAA,KAAAV,EAAAO,EAAAI,cAAA,IAAAT,EAAAK,EAAAK,eAEA,IArCA,aAsCA,OAAAL,EAAAM,iBAAA,IAAAb,EAAAO,EAAAK,cAAA,OAAAL,EAAAI,aAEA,QACA,OAAAX,EAAAO,EAAAI,cAAA,IAAAT,EAAAK,EAAAK,eAAA,IAAAL,EAAAM,mBAIOC,EAAA,SAAAT,GACP,OAAAD,EAAAC,EA9CA,eAgDWU,EAAU,SAAAV,GACrB,OAASW,IAAQF,EAAAL,OAAAJ,IAAAS,GAAA,IAAAN,MAAAS,aAENC,EAAsB,SAAAb,GACjC,IAAAc,EAAA,IAAAX,KACAY,EAAA,IAAAZ,KAAAC,OAAAJ,IACAgB,EAAiBC,IAAwBF,EAAAD,GACzCI,EAAAH,EAAAP,mBAAAM,EAAAN,iBAGA,WAAAQ,EACA,QACG,IAAAA,EACH,WASAjB,EAAAC,GARG,IAAAgB,EACH,YACGE,EACH,cAhEA,gBCEIC,EAEJ,SAAAC,GAGA,SAAAjB,IACA,cAAAiB,KAAAC,MAAAC,KAAAC,YAAAD,KAeA,OAlBEE,EAAA,UAAiBrB,EAAAiB,GAMnBjB,EAAAsB,UAAAC,OAAA,WACA,IAAAC,EAAAL,KAAAM,MACA5B,EAAA2B,EAAA3B,UACA6B,EAAAF,EAAAE,uBACAC,EAAAD,GAAgDnB,EAAUV,GAAA,8CAC1D,OAAW+B,EAAA,cAAmB,QAC9BD,YACAE,iBAAA,OACAC,iBAAAjC,GACK6B,EAA2BhB,EAAsBb,GAAcD,EAAiBC,KAGrFG,EAnBA,CAoBE4B,EAAA,eAEaG,EAAA","file":"static/js/@atlaskit-internal-renderer-node_Date.8288b6f9.chunk.js","sourcesContent":["import isBefore from 'date-fns/is_before';\nimport differenceInCalendarDays from 'date-fns/difference_in_calendar_days';\nvar ISO_FORMAT = 'YYYY-MM-DD';\nvar DEFAULT_FORMAT = 'DD MMM YYYY';\nexport var timestampToUTCDate = function timestampToUTCDate(timestamp) {\n  var date = new Date(Number(timestamp));\n  var day = date.getUTCDate();\n  var month = date.getUTCMonth() + 1;\n  var year = date.getUTCFullYear();\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\nexport var todayTimestampInUTC = function todayTimestampInUTC() {\n  var today = new Date();\n  var todayInUTC = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate());\n  return todayInUTC.toString();\n};\n\nvar addLeadingZero = function addLeadingZero(val) {\n  if (val < 10) {\n    return \"0\" + val;\n  }\n\n  return val;\n};\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar week_days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; // example: \"23 Jan 2018\"\n\nexport var timestampToString = function timestampToString(timestamp, pattern) {\n  var date = new Date(Number(timestamp));\n\n  switch (pattern) {\n    case 'ddd, DD MMM':\n      return week_days[date.getUTCDay()] + \", \" + addLeadingZero(date.getUTCDate()) + \" \" + months[date.getUTCMonth()];\n\n    case ISO_FORMAT:\n      return date.getUTCFullYear() + \"-\" + addLeadingZero(date.getUTCMonth() + 1) + \"-\" + date.getUTCDate();\n\n    default:\n      return addLeadingZero(date.getUTCDate()) + \" \" + months[date.getUTCMonth()] + \" \" + date.getUTCFullYear();\n  }\n}; // example: \"2018-01-23\"\n\nexport var timestampToIsoFormat = function timestampToIsoFormat(timestamp) {\n  return timestampToString(timestamp, ISO_FORMAT);\n};\nexport var isPastDate = function isPastDate(timestamp) {\n  return isBefore(timestampToIsoFormat(Number(timestamp)), timestampToIsoFormat(new Date().valueOf()));\n};\nexport var timestampToTaskContext = function timestampToTaskContext(timestamp) {\n  var curDate = new Date();\n  var givenDate = new Date(Number(timestamp));\n  var distance = differenceInCalendarDays(givenDate, curDate);\n  var sameYear = givenDate.getUTCFullYear() === curDate.getUTCFullYear();\n  var pattern = '';\n\n  if (distance === 0) {\n    return 'Today';\n  } else if (distance === 1) {\n    return 'Tomorrow';\n  } else if (distance === -1) {\n    pattern = 'Yesterday';\n  } else if (sameYear) {\n    pattern = 'ddd, DD MMM';\n  } else {\n    pattern = DEFAULT_FORMAT;\n  }\n\n  return timestampToString(timestamp, pattern);\n};","import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { PureComponent } from 'react';\nimport { isPastDate, timestampToString, timestampToTaskContext } from '@atlaskit/editor-common';\n\nvar Date =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Date, _super);\n\n  function Date() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Date.prototype.render = function () {\n    var _a = this.props,\n        timestamp = _a.timestamp,\n        parentIsIncompleteTask = _a.parentIsIncompleteTask;\n    var className = !!parentIsIncompleteTask && isPastDate(timestamp) ? 'date-node date-node-highlighted' : 'date-node';\n    return React.createElement(\"span\", {\n      className: className,\n      \"data-node-type\": \"date\",\n      \"data-timestamp\": timestamp\n    }, parentIsIncompleteTask ? timestampToTaskContext(timestamp) : timestampToString(timestamp));\n  };\n\n  return Date;\n}(PureComponent);\n\nexport default Date;"],"sourceRoot":""}