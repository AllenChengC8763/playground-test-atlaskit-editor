{"version":3,"sources":["utils/file.ts","components/FileInput.tsx","components/common/PreWrapDiv.tsx","components/common/CustomSVG.tsx","utils/editor.tsx","utils/string.ts","constants/svg.tsx","components/editor/ToolsDrawer.tsx","constants/urls.tsx","components/editor/helphers/selectMockMenu.tsx","components/editor/helphers/extensionHandlers.tsx","components/editor/Editor.tsx","components/App.tsx","index.tsx"],"names":["uploadFile","files","multiple","onChange","fileList","Object","keys","forEach","idx","_idx","Number","file","isNaN","push","reader","FileReader","readAsDataURL","onload","FileInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileRef","React","fileOnChange","e","_this$props","target","length","setState","state","_this$props2","disabled","isHide","react","className","cn","is-hide","style_default","a","id","type","ref","PreWrapDiv","styled","div","_templateObject","CustomSVG","_ref","width","height","d","viewBox","concat","focusable","role","fill","fillRule","createEditorMenuItem","str","content","elemBefore","onClick","value","name","replace","word","index","toLowerCase","toUpperCase","tooltipDescription","tooltipPosition","common_CustomSVG","ToolsDrawer","fileInputRef","imageUploadRef","transformer","recursiveFileUploadQueue","filesName","toConsumableArray","map","recursiveImageUploadQueue","actions","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","window","URL","createObjectURL","sent","replaceSelection","attrs","layout","stop","_x","apply","arguments","JSONTransformer","isShowEditorValue","jsonDocument","_this2","renderEditor","isImageUpload","_this$state","EditorContext","components_FileInput","WithEditorActions","render","_callee2","getValue","_context2","editorView","obj","encode","doc","JSON","stringify","legacyImageUploadProvider","Promise","resolve","current","click","fileUploadMenuItem","common_PreWrapDiv","fileName","youtubeReg","vimeoReg","mockInsertMenu","movie","editorActions","prompt","youtubeMatch","match","vimeoMatch","newParameters","extensionType","extensionKey","text","parameters","selectMockMenu","menu","menuItem","extensionHandlers","com.haniplanet.macro.core","ext","src","title","Editor","editor_ToolsDrawer","assign","editor","appearance","insertMenuItems","allowExtension","App","editorValue","editor_Editor","Renderer","document","ReactDOM","react_default","createElement","components_App","getElementById"],"mappings":"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","file":"static/js/main.5140206a.chunk.js","sourcesContent":["export const uploadFile = (\n  files: FileList,\n  multiple: boolean,\n  onChange: (fileList: File[]) => void\n) => {\n  const fileList: File[] = [];\n\n  Object.keys(files).forEach(idx => {\n    const _idx = Number(idx);\n    const file = files[_idx];\n\n    if (!isNaN(_idx)) {\n      if (multiple) {\n        fileList.push(file);\n      } else {\n        const reader = new FileReader();\n\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          const fileList: File[] = [file];\n\n          onChange && onChange(fileList);\n        };\n      }\n    }\n  });\n\n  if (multiple) {\n    onChange && onChange(fileList);\n  }\n};\n","import * as React from \"react\";\nimport cn from \"classnames\";\nimport { uploadFile } from \"../utils/file\";\nimport { IFileResult } from \"../types/file\";\n\ninterface Props {\n  onChange: (fileList: File[]) => void;\n  multiple?: boolean;\n  disabled?: boolean;\n  isHide?: boolean;\n}\n\ntype State = Pick<IFileResult, \"file\">;\n\nclass FileInput extends React.Component<Props, State> {\n  fileRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      file: null\n    };\n  }\n\n  fileOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { multiple, onChange } = this.props;\n    const {\n      target: { files }\n    } = e;\n    const file = files[0];\n\n    if (!files.length) return;\n\n    uploadFile(files, multiple, onChange);\n    this.setState({ file });\n  };\n\n  render() {\n    const { multiple, disabled, isHide } = this.props;\n\n    return (\n      <div className={cn({ \"is-hide\": isHide })}>\n        <style jsx>{`\n          div.is-hide {\n            display: none;\n          }\n        `}</style>\n        <input\n          type=\"file\"\n          ref={this.fileRef}\n          onChange={this.fileOnChange}\n          multiple={multiple}\n          disabled={disabled}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FileInput;\n","import styled from \"styled-components\";\n\nconst PreWrapDiv = styled.div`\n  white-space: pre-wrap;\n\n  &:empty:not(:focus)::before {\n    content: attr(data-placeholder);\n    font-size: 14px;\n  }\n`;\n\nexport default PreWrapDiv;\n","import * as React from \"react\";\n\ninterface Props {\n  width: string;\n  height: string;\n  d: string;\n}\n\nconst CustomSVG = ({ width, height, d }: Props) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={`0 0 ${width} ${height}`}\n    focusable=\"false\"\n    role=\"presentation\"\n  >\n    <path d={d} fill=\"currentColor\" fillRule=\"evenodd\" />\n  </svg>\n);\n\nexport default CustomSVG;\n","import * as React from \"react\";\nimport {\n  InsertMenuCustomItem,\n  ReactComponents\n} from \"@atlaskit/editor-core/types\";\nimport { EditorActions } from \"@atlaskit/editor-core\";\nimport CustomSVG from \"../components/common/CustomSVG\";\nimport { testIcon } from \"../constants/svg\";\nimport { camelize } from \"./string\";\n\ninterface EditorMenuItems {\n  content: string;\n  elemBefore?: ReactComponents;\n  onClick?: (editorActions: EditorActions) => void;\n}\n\nexport const createEditorMenuItem = ({\n  content,\n  elemBefore,\n  onClick\n}: EditorMenuItems): InsertMenuCustomItem => ({\n  content,\n  value: {\n    name: camelize(content)\n  },\n  tooltipDescription: content,\n  tooltipPosition: \"right\",\n  elemBefore: elemBefore || <CustomSVG width=\"24\" height=\"24\" d={testIcon} />,\n  onClick\n});\n","import { Indexable } from \"../types/common\";\n\nexport const jsonPretty = (obj: Indexable) => JSON.stringify(obj, null, 2);\n\nexport const camelize = (str: string) =>\n  str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) =>\n      index === 0 ? word.toLowerCase() : word.toUpperCase()\n    )\n    .replace(/\\s+/g, \"\");\n","export const testIcon =\n  \"M10.208 7.308a1.09 1.09 0 0 1 0 1.483l-3.515 3.71 3.515 3.708a1.09 1.09 0 0 1 0 1.483.957.957 0 0 1-1.405 0l-3.866-4.08a1.635 1.635 0 0 1 0-2.225l3.866-4.08a.957.957 0 0 1 1.405 0zm3.584 0a.957.957 0 0 1 1.405 0l3.866 4.08c.583.614.583 1.61 0 2.225l-3.866 4.08a.957.957 0 0 1-1.405 0 1.09 1.09 0 0 1 0-1.484l3.515-3.708-3.515-3.71a1.09 1.09 0 0 1 0-1.483z\";\n","import * as React from \"react\";\nimport {\n  EditorContext,\n  WithEditorActions,\n  EditorActions\n} from \"@atlaskit/editor-core\";\nimport { JSONTransformer } from \"@atlaskit/editor-json-transformer\";\nimport { InsertMenuCustomItem } from \"@atlaskit/editor-core/types\";\nimport { ImageUploadHandler } from \"@atlaskit/editor-core/plugins/image-upload/types\";\nimport { EditorView } from \"prosemirror-view\";\nimport FileInput from \"../FileInput\";\nimport PreWrapDiv from \"../common/PreWrapDiv\";\nimport { jsonPretty } from \"../../utils/string\";\nimport { EditorProps } from \"./Editor\";\nimport { createEditorMenuItem } from \"../../utils/editor\";\n\ninterface RenderEditor {\n  onChange: (editorView: EditorView<any>) => void;\n  fileUploadMenuItem: InsertMenuCustomItem;\n  legacyImageUploadProvider: Promise<ImageUploadHandler>;\n}\n\ninterface Props extends EditorProps {\n  renderEditor: (params: RenderEditor) => React.ReactNode;\n  isImageUpload?: boolean;\n}\n\ninterface State {\n  isShowEditorValue: boolean;\n  jsonDocument: string;\n  filesName: string[];\n}\n\nclass ToolsDrawer extends React.Component<Props, State> {\n  fileInputRef: React.RefObject<FileInput> = React.createRef();\n  imageUploadRef: React.RefObject<FileInput> = React.createRef();\n  transformer: JSONTransformer;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.transformer = new JSONTransformer();\n    this.state = {\n      isShowEditorValue: false,\n      jsonDocument: \"{}\",\n      filesName: []\n    };\n  }\n\n  recursiveFileUploadQueue = (fileList: File[]) => {\n    const { filesName } = this.state;\n\n    this.setState({\n      filesName: [...filesName, ...fileList.map(file => file.name)]\n    });\n  };\n\n  recursiveImageUploadQueue = (fileList: File[], actions: EditorActions) =>\n    fileList.forEach(async file => {\n      const url = await window.URL.createObjectURL(file);\n\n      actions.replaceSelection({\n        type: \"mediaSingle\",\n        attrs: { layout: \"center\" },\n        content: [\n          {\n            type: \"media\",\n            attrs: {\n              type: \"external\",\n              url\n            }\n          }\n        ]\n      });\n    });\n\n  render() {\n    const { renderEditor, isImageUpload } = this.props;\n    const { isShowEditorValue, filesName } = this.state;\n\n    return (\n      <EditorContext>\n        <>\n          <button\n            onClick={() => {\n              this.setState({\n                isShowEditorValue: !isShowEditorValue\n              });\n            }}\n          >\n            Show/Hide JSON Data\n          </button>\n          <FileInput\n            ref={this.fileInputRef}\n            onChange={this.recursiveFileUploadQueue}\n            multiple\n            isHide\n          />\n          <WithEditorActions\n            render={actions => (\n              <>\n                <button\n                  onClick={async () => {\n                    const { getValue } = this.props;\n                    const value = await actions.getValue();\n\n                    getValue(value);\n                  }}\n                >\n                  Save\n                </button>\n                {isImageUpload && (\n                  <FileInput\n                    ref={this.imageUploadRef}\n                    onChange={file =>\n                      this.recursiveImageUploadQueue(file, actions)\n                    }\n                    multiple\n                    isHide\n                  />\n                )}\n              </>\n            )}\n          />\n          {renderEditor({\n            onChange: editorView => {\n              const jsonDocument = jsonPretty(\n                this.transformer.encode(editorView.state.doc)\n              );\n\n              this.setState({ jsonDocument });\n            },\n            legacyImageUploadProvider:\n              isImageUpload &&\n              Promise.resolve(() =>\n                this.imageUploadRef.current.fileRef.current.click()\n              ),\n            fileUploadMenuItem: createEditorMenuItem({\n              content: \"File Upload\",\n              onClick: () => this.fileInputRef.current.fileRef.current.click()\n            })\n          })}\n          {isShowEditorValue && (\n            <PreWrapDiv>{this.state.jsonDocument}</PreWrapDiv>\n          )}\n          {!!filesName.length && (\n            <ul>\n              {filesName.map(fileName => (\n                <li>{fileName}</li>\n              ))}\n            </ul>\n          )}\n        </>\n      </EditorContext>\n    );\n  }\n}\n\nexport default ToolsDrawer;\n","/* eslint-disable no-useless-escape */\nexport const youtubeReg = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\nexport const vimeoReg = /(?:vimeo)\\.com.*(?:videos|video|channels|)\\/([\\d]+)/i;\n","import { youtubeReg, vimeoReg } from \"../../../constants/urls\";\nimport { InsertMenuCustomItem } from \"@atlaskit/editor-core/types\";\nimport { createEditorMenuItem } from \"../../../utils/editor\";\n\ninterface Params {\n  type: string;\n  url: any;\n}\n\ntype MockMenuItem = \"movie\";\n\ntype SelectMockMenu = MockMenuItem[];\n\ninterface MockInsertMenu {\n  [key: string]: InsertMenuCustomItem;\n}\n\nconst mockInsertMenu: MockInsertMenu = {\n  movie: createEditorMenuItem({\n    content: \"Movie extension\",\n    onClick: editorActions => {\n      const url = prompt(\"Input Url\") || \"\";\n      const youtubeMatch = url.match(youtubeReg);\n      const vimeoMatch = url.match(vimeoReg);\n      const newParameters: Params = {} as Params;\n\n      if (youtubeMatch && youtubeMatch[2].length === 11) {\n        newParameters.type = \"youtube\";\n        newParameters.url = youtubeMatch;\n      } else if (vimeoMatch && url[1]) {\n        newParameters.type = \"vimeo\";\n        newParameters.url = vimeoMatch;\n      } else {\n        return null;\n      }\n\n      editorActions.replaceSelection({\n        type: \"extension\",\n        attrs: {\n          extensionType: \"com.haniplanet.macro.core\",\n          extensionKey: \"movie\",\n          text: \"Movie extension\",\n          parameters: newParameters\n        }\n      });\n    }\n  })\n};\n\nconst selectMockMenu = (menu: SelectMockMenu): InsertMenuCustomItem[] =>\n  menu.map(menuItem => mockInsertMenu[menuItem]);\n\nexport default selectMockMenu;\n","import * as React from \"react\";\nimport { ExtensionHandlers } from \"@atlaskit/editor-common\";\n\ninterface Movie {\n  id: string;\n  src: string;\n}\n\nconst extensionHandlers: ExtensionHandlers = {\n  \"com.haniplanet.macro.core\": (ext, doc) => {\n    const { extensionKey, parameters } = ext;\n\n    switch (extensionKey) {\n      case \"movie\":\n        const { type, url } = parameters;\n        const movie: Movie = {} as Movie;\n\n        if (type === \"youtube\") {\n          movie.id = url[2];\n          movie.src = \"//www.youtube.com/embed/\";\n        } else if (type === \"vimeo\") {\n          movie.id = url[1];\n          movie.src = \"//player.vimeo.com/video/\";\n        } else {\n          return null;\n        }\n\n        return (\n          <div>\n            <iframe\n              title={`movie-${movie.id}`}\n              width=\"560\"\n              height=\"315\"\n              src={movie.src + movie.id}\n            />\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n};\n\nexport default extensionHandlers;\n","import * as React from \"react\";\nimport { Editor as EditorCore } from \"@atlaskit/editor-core\";\nimport ToolsDrawer from \"./ToolsDrawer\";\nimport selectMockMenu from \"./helphers/selectMockMenu\";\nimport extensionHandlers from \"./helphers/extensionHandlers\";\n\nexport interface EditorProps {\n  getValue: (value: string) => void;\n}\n\nconst Editor = (props: EditorProps) => (\n  <ToolsDrawer\n    isImageUpload\n    renderEditor={({\n      onChange,\n      fileUploadMenuItem,\n      legacyImageUploadProvider\n    }) => (\n      <EditorCore\n        appearance=\"comment\"\n        extensionHandlers={extensionHandlers}\n        insertMenuItems={[...selectMockMenu([\"movie\"]), fileUploadMenuItem]}\n        onChange={onChange}\n        legacyImageUploadProvider={legacyImageUploadProvider}\n        allowExtension\n      />\n    )}\n    {...props}\n  />\n);\n\nexport default Editor;\n","import * as React from \"react\";\nimport { ReactRenderer } from \"@atlaskit/renderer\";\nimport Editor from \"./editor/Editor\";\nimport extensionHandlers from \"./editor/helphers/extensionHandlers\";\n\ntype Props = {};\n\ninterface State {\n  editorValue: string;\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      editorValue: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <Editor getValue={editorValue => this.setState({ editorValue })} />\n        <ReactRenderer\n          document={this.state.editorValue}\n          extensionHandlers={extensionHandlers}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}