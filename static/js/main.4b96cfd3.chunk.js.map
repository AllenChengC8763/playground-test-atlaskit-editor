{"version":3,"sources":["components/styledComponents/PreWrapDiv.tsx","utils/string.tsx","components/editor/ToolsDrawer.tsx","constants/urls.tsx","components/common/CustomSVG.tsx","components/editor/helphers/mockInsertMenu.tsx","utils/editor.tsx","constants/svg.tsx","components/editor/helphers/extensionHandlers.tsx","components/editor/Editor.tsx","components/App.tsx","index.tsx"],"names":["PreWrapDiv","styled","div","_templateObject","jsonPretty","obj","JSON","stringify","ToolsDrawer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","transformer","onChange","editorView","jsonDocument","encode","state","doc","setState","JSONTransformer","isShowEditorValue","_this2","renderEditor","react","EditorContext","onClick","WithEditorActions","render","actions","asyncToGenerator","regenerator_default","a","mark","_callee","getValue","value","wrap","_context","prev","next","sent","stop","styledComponents_PreWrapDiv","React","youtubeReg","vimeoReg","CustomSVG","_ref","width","height","d","viewBox","concat","focusable","role","fill","fillRule","mockInsertMenu","str","content","elemBefore","name","replace","word","index","toLowerCase","toUpperCase","tooltipDescription","tooltipPosition","common_CustomSVG","createEditorMenuItem","editorActions","url","prompt","youtubeMatch","match","vimeoMatch","newParameters","length","type","replaceSelection","attrs","extensionType","extensionKey","text","parameters","extensionHandlers","com.haniplanet.macro.core","ext","movie","id","src","title","Editor","editor_ToolsDrawer","assign","editor","appearance","insertMenuItems","allowExtension","App","editorValue","editor_Editor","Renderer","document","ReactDOM","react_default","createElement","components_App","getElementById"],"mappings":"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","file":"static/js/main.4b96cfd3.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst PreWrapDiv = styled.div`\n  white-space: pre-wrap;\n\n  &:empty:not(:focus)::before {\n    content: attr(data-placeholder);\n    font-size: 14px;\n  }\n`;\n\nexport default PreWrapDiv;\n","import { Indexable } from \"../types/common\";\n\nexport const jsonPretty = (obj: Indexable) => JSON.stringify(obj, null, 2);\n\nexport const camelize = (str: string) =>\n  str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) =>\n      index === 0 ? word.toLowerCase() : word.toUpperCase()\n    )\n    .replace(/\\s+/g, \"\");\n","import * as React from \"react\";\nimport { EditorContext, WithEditorActions } from \"@atlaskit/editor-core\";\nimport { JSONTransformer } from \"@atlaskit/editor-json-transformer\";\nimport PreWrapDiv from \"../styledComponents/PreWrapDiv\";\nimport { jsonPretty } from \"../../utils/string\";\nimport { EditorView } from \"prosemirror-view\";\nimport { Indexable } from \"../../types/common\";\nimport { EditorProps } from \"./Editor\";\n\ninterface Props extends EditorProps {\n  renderEditor: (params: Indexable) => React.ReactNode;\n}\n\ninterface State {\n  isShowEditorValue: boolean;\n  jsonDocument: string;\n}\n\nclass ToolsDrawer extends React.Component<Props, State> {\n  transformer: JSONTransformer;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.transformer = new JSONTransformer();\n    this.state = {\n      isShowEditorValue: false,\n      jsonDocument: \"{}\"\n    };\n  }\n\n  onChange = (editorView: EditorView<any>): void => {\n    const jsonDocument = jsonPretty(\n      this.transformer.encode(editorView.state.doc)\n    );\n\n    this.setState({\n      jsonDocument\n    });\n  };\n\n  render() {\n    const { renderEditor } = this.props;\n    const { isShowEditorValue } = this.state;\n\n    return (\n      <EditorContext>\n        <>\n          <button\n            onClick={() => {\n              this.setState({\n                isShowEditorValue: !isShowEditorValue\n              });\n            }}\n          >\n            Show/Hide JSON Data\n          </button>\n          <WithEditorActions\n            render={actions => (\n              <>\n                <button\n                  onClick={async () => {\n                    const { getValue } = this.props;\n                    const value = await actions.getValue();\n\n                    getValue(value);\n                  }}\n                >\n                  Save\n                </button>\n              </>\n            )}\n          />\n          {renderEditor({\n            onChange: this.onChange\n          })}\n          {isShowEditorValue && (\n            <PreWrapDiv>{this.state.jsonDocument}</PreWrapDiv>\n          )}\n        </>\n      </EditorContext>\n    );\n  }\n}\n\nexport default ToolsDrawer;\n","/* eslint-disable no-useless-escape */\nexport const youtubeReg = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\nexport const vimeoReg = /(?:vimeo)\\.com.*(?:videos|video|channels|)\\/([\\d]+)/i;\n","import * as React from \"react\";\n\ninterface Props {\n  width: string;\n  height: string;\n  d: string;\n}\n\nconst CustomSVG = ({ width, height, d }: Props) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={`0 0 ${width} ${height}`}\n    focusable=\"false\"\n    role=\"presentation\"\n  >\n    <path d={d} fill=\"currentColor\" fillRule=\"evenodd\" />\n  </svg>\n);\n\nexport default CustomSVG;\n","import { youtubeReg, vimeoReg } from \"../../../constants/urls\";\nimport { InsertMenuCustomItem } from \"@atlaskit/editor-core/types\";\nimport { createEditorMenuItem } from \"../../../utils/editor\";\n\ninterface Params {\n  type: string;\n  url: any;\n}\n\nconst mockInsertMenu: InsertMenuCustomItem[] = [\n  createEditorMenuItem({\n    content: \"Movie extension\",\n    onClick: editorActions => {\n      const url = prompt(\"Input Url\") || \"\";\n      const youtubeMatch = url.match(youtubeReg);\n      const vimeoMatch = url.match(vimeoReg);\n      const newParameters: Params = {} as Params;\n\n      if (youtubeMatch && youtubeMatch[2].length === 11) {\n        newParameters.type = \"youtube\";\n        newParameters.url = youtubeMatch;\n      } else if (vimeoMatch && url[1]) {\n        newParameters.type = \"vimeo\";\n        newParameters.url = vimeoMatch;\n      } else {\n        return null;\n      }\n\n      editorActions.replaceSelection({\n        type: \"extension\",\n        attrs: {\n          extensionType: \"com.haniplanet.macro.core\",\n          extensionKey: \"movie\",\n          text: \"Movie extension\",\n          parameters: newParameters\n        }\n      });\n    }\n  })\n];\n\nexport default mockInsertMenu;\n","import * as React from \"react\";\nimport {\n  InsertMenuCustomItem,\n  ReactComponents\n} from \"@atlaskit/editor-core/types\";\nimport { EditorActions } from \"@atlaskit/editor-core\";\nimport CustomSVG from \"../components/common/CustomSVG\";\nimport { testIcon } from \"../constants/svg\";\nimport { camelize } from \"./string\";\n\ninterface EditorMenuItems {\n  content: string;\n  elemBefore?: ReactComponents;\n  onClick?: (editorActions: EditorActions) => void;\n}\n\nexport const createEditorMenuItem = ({\n  content,\n  elemBefore,\n  onClick\n}: EditorMenuItems): InsertMenuCustomItem => ({\n  content,\n  value: {\n    name: camelize(content)\n  },\n  tooltipDescription: content,\n  tooltipPosition: \"right\",\n  elemBefore: elemBefore || <CustomSVG width=\"24\" height=\"24\" d={testIcon} />,\n  onClick\n});\n","export const testIcon =\n  \"M10.208 7.308a1.09 1.09 0 0 1 0 1.483l-3.515 3.71 3.515 3.708a1.09 1.09 0 0 1 0 1.483.957.957 0 0 1-1.405 0l-3.866-4.08a1.635 1.635 0 0 1 0-2.225l3.866-4.08a.957.957 0 0 1 1.405 0zm3.584 0a.957.957 0 0 1 1.405 0l3.866 4.08c.583.614.583 1.61 0 2.225l-3.866 4.08a.957.957 0 0 1-1.405 0 1.09 1.09 0 0 1 0-1.484l3.515-3.708-3.515-3.71a1.09 1.09 0 0 1 0-1.483z\";\n","import * as React from \"react\";\nimport { ExtensionHandlers } from \"@atlaskit/editor-common\";\n\ninterface Movie {\n  id: string;\n  src: string;\n}\n\nconst extensionHandlers: ExtensionHandlers = {\n  \"com.haniplanet.macro.core\": (ext, doc) => {\n    const { extensionKey, parameters } = ext;\n\n    switch (extensionKey) {\n      case \"movie\":\n        const { type, url } = parameters;\n        const movie: Movie = {} as Movie;\n\n        if (type === \"youtube\") {\n          movie.id = url[2];\n          movie.src = \"//www.youtube.com/embed/\";\n        } else if (type === \"vimeo\") {\n          movie.id = url[1];\n          movie.src = \"//player.vimeo.com/video/\";\n        } else {\n          return null;\n        }\n\n        return (\n          <div>\n            <iframe\n              title={`movie-${movie.id}`}\n              width=\"560\"\n              height=\"315\"\n              src={movie.src + movie.id}\n            />\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n};\n\nexport default extensionHandlers;\n","import * as React from \"react\";\nimport { Editor as EditorCore } from \"@atlaskit/editor-core\";\nimport ToolsDrawer from \"./ToolsDrawer\";\nimport mockInsertMenu from \"./helphers/mockInsertMenu\";\nimport extensionHandlers from \"./helphers/extensionHandlers\";\n\nexport interface EditorProps {\n  getValue: (value: string) => void;\n}\n\nconst Editor = (props: EditorProps) => (\n  <ToolsDrawer\n    renderEditor={({ onChange }) => (\n      <EditorCore\n        appearance=\"comment\"\n        extensionHandlers={extensionHandlers}\n        insertMenuItems={mockInsertMenu}\n        onChange={onChange}\n        allowExtension\n      />\n    )}\n    {...props}\n  />\n);\n\nexport default Editor;\n","import * as React from \"react\";\nimport { ReactRenderer } from \"@atlaskit/renderer\";\nimport Editor from \"./editor/Editor\";\nimport extensionHandlers from \"./editor/helphers/extensionHandlers\";\n\ntype Props = {};\n\ninterface State {\n  editorValue: string;\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      editorValue: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <Editor getValue={editorValue => this.setState({ editorValue })} />\n        <ReactRenderer\n          document={this.state.editorValue}\n          extensionHandlers={extensionHandlers}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}