{"version":3,"sources":["../node_modules/@atlaskit/media-picker/components/binary.js"],"names":["__webpack_require__","r","__webpack_exports__","d","BinaryUploaderImpl","tslib__WEBPACK_IMPORTED_MODULE_0__","_super","context","config","call","this","prototype","upload","base64","name","filename","file","_urltoFile","uploadService","addFiles","dataurl","arr","split","matches","match","length","Error","mime","bstr","atob","n","u8arr","Uint8Array","charCodeAt","Blob","type"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,uCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAGAI,EAEA,SAAAE,GAGA,SAAAF,EAAAG,EAAAC,GACA,OAAAF,EAAAG,KAAAC,KAAAH,EAAAC,IAAAE,KAmCA,OAtCEL,EAAA,UAAiBD,EAAAE,GAMnBF,EAAAO,UAAAC,OAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAD,GAAA,OAEAE,EAAAN,KAAAO,WAAAJ,EAAAE,GAEAL,KAAAQ,cAAAC,SAAA,CAAAH,KAGAZ,EAAAO,UAAAM,WAAA,SAAAG,EAAAL,GACA,IAAAM,EAAAD,EAAAE,MAAA,KACAC,EAAAF,EAAA,GAAAG,MAAA,WAEA,IAAAD,KAAAE,OAAA,EACA,UAAAC,MAAA,yCAQA,IALA,IAAAC,EAAAJ,EAAA,GACAK,EAAAC,KAAAR,EAAA,IACAS,EAAAF,EAAAH,OACAM,EAAA,IAAAC,WAAAF,GAEAA,KACAC,EAAAD,GAAAF,EAAAK,WAAAH,GAGA,IAAAd,EAAA,IAAAkB,KAAA,CAAAH,GAAA,CACAI,KAAAR,IAGA,OADAX,EAAAF,KAAAC,EACAC,GAGAZ,EAvCA,CALAJ,EAAA,KA6CE","file":"static/js/@atlaskit-internal_media-picker-binary.e8058e35.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { LocalUploadComponent } from './localUpload';\n\nvar BinaryUploaderImpl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BinaryUploaderImpl, _super);\n\n  function BinaryUploaderImpl(context, config) {\n    return _super.call(this, context, config) || this;\n  }\n\n  BinaryUploaderImpl.prototype.upload = function (base64, name) {\n    var filename = name || 'file';\n\n    var file = this._urltoFile(base64, filename);\n\n    this.uploadService.addFiles([file]);\n  };\n\n  BinaryUploaderImpl.prototype._urltoFile = function (dataurl, filename) {\n    var arr = dataurl.split(',');\n    var matches = arr[0].match(/:(.*?);/);\n\n    if (!matches || matches.length < 2) {\n      throw new Error('Failed to retrieve file from data URL');\n    }\n\n    var mime = matches[1];\n    var bstr = atob(arr[1]);\n    var n = bstr.length;\n    var u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    var file = new Blob([u8arr], {\n      type: mime\n    });\n    file.name = filename;\n    return file;\n  };\n\n  return BinaryUploaderImpl;\n}(LocalUploadComponent);\n\nexport { BinaryUploaderImpl };"],"sourceRoot":""}