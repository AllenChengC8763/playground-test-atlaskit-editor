{"version":3,"sources":["../node_modules/@atlaskit/media-store/utils/hashing/workerHasher.js"],"names":["__webpack_require__","r","__webpack_exports__","d","WorkerHasher","uuid_v4__WEBPACK_IMPORTED_MODULE_0__","uuid_v4__WEBPACK_IMPORTED_MODULE_0___default","n","rusha__WEBPACK_IMPORTED_MODULE_1__","rusha__WEBPACK_IMPORTED_MODULE_1___default","numOfWorkers","this","workers","jobs","i","push","createWorker","prototype","hash","chunk","calculateHashInWorker","_this","worker","a","hasherWorker","activeJobs","addEventListener","event","handleWorkerMessage","id","data","_a","resolve","reject","error","blob","jobId","Promise","getMostRelaxedWorker","dispatch","chunkBlob","navigator","userAgent","indexOf","rd_1","FileReader","onload","postMessage","result","readAsBinaryString","reduce","current","next"],"mappings":"6FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,iCAAAE,IAAA,IAAAC,EAAAL,EAAA,KAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,MAAAS,EAAAT,EAAAO,EAAAC,GAIAJ,EAEA,WACA,SAAAA,EAAAM,GACAC,KAAAC,QAAA,GACAD,KAAAE,KAAA,GAEA,QAAAC,EAAA,EAAmBA,EAAAJ,IAAkBI,EACrCH,KAAAC,QAAAG,KAAAJ,KAAAK,gBAkGA,OA9FAZ,EAAAa,UAAAC,KAAA,SAAAC,GACA,OAAAR,KAAAS,sBAAAD,IAGAf,EAAAa,UAAAD,aAAA,WACA,IAAAK,EAAAV,KAEAW,EAAiBb,EAAAc,EAAKP,eACtBQ,EAAA,CACAF,SACAG,WAAA,GAKA,OAHAH,EAAAI,iBAAA,mBAAAC,GACAN,EAAAO,oBAAAD,EAAAH,KAEAA,GAGApB,EAAAa,UAAAW,oBAAA,SAAAD,EAAAH,GACA,IAAAK,EAAAF,EAAAG,KAAAD,GAEA,GAAAlB,KAAAE,KAAAgB,GAAA,CACA,IAAAE,EAAApB,KAAAE,KAAAgB,GACAG,EAAAD,EAAAC,QACAC,EAAAF,EAAAE,cACAtB,KAAAE,KAAAgB,GACAL,EAAAC,aAEAE,EAAAG,KAAAI,MAGAD,EAAAN,EAAAG,KAAAI,OAEAF,EAAAL,EAAAG,KAAAZ,QAKAd,EAAAa,UAAAG,sBAAA,SAAAe,GACA,IAAAd,EAAAV,KAEAyB,EAAgB9B,MAChB,WAAA+B,QAAA,SAAAL,EAAAC,GACAZ,EAAAR,KAAAuB,GAAA,CACAJ,UACAC,UAGA,IAAAX,EAAAD,EAAAiB,uBAEAjB,EAAAkB,SAAAH,EAAAd,EAAAa,MAIA/B,EAAAa,UAAAsB,SAAA,SAAAH,EAAAZ,EAAAgB,GACAhB,EAAAC,aACA,IAAAH,EAAAE,EAAAF,OAQA,GAAAmB,UAAAC,UAAAC,QAAA,mBAAAF,UAAAC,UAAAC,QAAA,WACA,IAAAC,EAAA,IAAAC,WAUA,OARAD,EAAAE,OAAA,WACAxB,EAAAyB,YAAA,CACAlB,GAAAO,EACAN,KAAAc,EAAAI,eAIAJ,EAAAK,mBAAAT,GAIAlB,EAAAyB,YAAA,CACAlB,GAAAO,EACAN,KAAAU,KAIApC,EAAAa,UAAAqB,qBAAA,WACA,OAAA3B,KAAAC,QAAAsC,OAAA,SAAAC,EAAAC,GACA,OAAAA,EAAA3B,WAAA0B,EAAA1B,WACA2B,EAGAD,GACKxC,KAAAC,QAAA,KAGLR,EAxGA","file":"static/js/231.ec7280d4.chunk.js","sourcesContent":["/* tslint:disable:no-var-requires */\nimport uuidV4 from 'uuid/v4';\nimport Rusha from 'rusha';\n\nvar WorkerHasher =\n/** @class */\nfunction () {\n  function WorkerHasher(numOfWorkers) {\n    this.workers = [];\n    this.jobs = {};\n\n    for (var i = 0; i < numOfWorkers; ++i) {\n      this.workers.push(this.createWorker());\n    }\n  }\n\n  WorkerHasher.prototype.hash = function (chunk) {\n    return this.calculateHashInWorker(chunk);\n  };\n\n  WorkerHasher.prototype.createWorker = function () {\n    var _this = this;\n\n    var worker = Rusha.createWorker();\n    var hasherWorker = {\n      worker: worker,\n      activeJobs: 0\n    };\n    worker.addEventListener('message', function (event) {\n      _this.handleWorkerMessage(event, hasherWorker);\n    });\n    return hasherWorker;\n  };\n\n  WorkerHasher.prototype.handleWorkerMessage = function (event, hasherWorker) {\n    var id = event.data.id;\n\n    if (this.jobs[id]) {\n      var _a = this.jobs[id],\n          resolve = _a.resolve,\n          reject = _a.reject;\n      delete this.jobs[id];\n      hasherWorker.activeJobs--;\n\n      if (event.data.error) {\n        // TODO previously we were just calling it again.\n        // this.calculateHashInWorker(chunk);\n        reject(event.data.error);\n      } else {\n        resolve(event.data.hash);\n      }\n    }\n  };\n\n  WorkerHasher.prototype.calculateHashInWorker = function (blob) {\n    var _this = this;\n\n    var jobId = uuidV4();\n    return new Promise(function (resolve, reject) {\n      _this.jobs[jobId] = {\n        resolve: resolve,\n        reject: reject\n      };\n\n      var worker = _this.getMostRelaxedWorker();\n\n      _this.dispatch(jobId, worker, blob);\n    });\n  };\n\n  WorkerHasher.prototype.dispatch = function (jobId, hasherWorker, chunkBlob) {\n    hasherWorker.activeJobs++;\n    var worker = hasherWorker.worker;\n    /*\n     * postMessage() with chunk blob in Safari results in the error\n     * \"Failed to load resource: The operation could not be completed. (WebKitBlobResource error 1.)\"\n     *\n     * To prevent it, we read the data from the blob using FileReader and pass it via postMessage to the worker.\n     */\n\n    if (navigator.userAgent.indexOf('Safari') > -1 && navigator.userAgent.indexOf('Chrome') === -1) {\n      var rd_1 = new FileReader();\n\n      rd_1.onload = function () {\n        worker.postMessage({\n          id: jobId,\n          data: rd_1.result\n        });\n      };\n\n      rd_1.readAsBinaryString(chunkBlob);\n      return;\n    }\n\n    worker.postMessage({\n      id: jobId,\n      data: chunkBlob\n    });\n  };\n\n  WorkerHasher.prototype.getMostRelaxedWorker = function () {\n    return this.workers.reduce(function (current, next) {\n      if (next.activeJobs < current.activeJobs) {\n        return next;\n      }\n\n      return current;\n    }, this.workers[0]);\n  };\n\n  return WorkerHasher;\n}();\n\nexport { WorkerHasher };"],"sourceRoot":""}