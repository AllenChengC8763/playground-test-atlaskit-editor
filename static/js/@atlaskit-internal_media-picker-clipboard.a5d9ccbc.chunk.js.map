{"version":3,"sources":["../node_modules/@atlaskit/media-picker/util/appendTimestamp.js","../node_modules/@atlaskit/media-picker/components/clipboard.js","../node_modules/@atlaskit/media-picker/util/documentReady.js"],"names":["padZero","n","__webpack_require__","d","__webpack_exports__","clipboard_getFilesFromClipboard","clipboard_ClipboardImpl","files","Array","from","map","file","type","indexOf","name_1","fileName","timestamp","dotPosition","lastIndexOf","containsDot","fileNameWithoutExtension","substring","extension","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","appendTimestamp","name","lastModified","File","_super","ClipboardImpl","context","config","uploadParams","_this","call","this","pasteHandler","event","clipboardData","fileSource_1","types","length","PastedScreenshot","PastedFile","filesArray","source","uploadService","addFilesWithSource","tslib_es6","prototype","activate","_a","label","documentReady","sent","deactivate","document","addEventListener","removeEventListener","localUpload","whenDomReady","exenv__WEBPACK_IMPORTED_MODULE_0__","readyState","Promise","resolve","window"],"mappings":"gIAAAA,EAAA,SAAAC,GACA,OAAAA,EAAA,OAAAA,EAAA,GAAAA,YCDAC,EAAAC,EAAAC,EAAA,0CAAAC,IAAAH,EAAAC,EAAAC,EAAA,kCAAAE,IAKO,IAAID,EAAqB,SAAAE,GAChC,OAAAC,MAAAC,KAAAF,GAAAG,IAAA,SAAAC,GACA,OAAAA,EAAAC,KAAAC,QAAA,WACA,IAAAC,EDJO,SAAAC,EAAAC,GACP,IAAAC,EAAAF,EAAAG,YAAA,KACAC,EAAAF,EAAA,EACAG,EAAAD,EAAAJ,EAAAM,UAAA,EAAAJ,GAAAF,EACAO,EAAAH,EAAAJ,EAAAM,UAAAJ,GAAA,GACAM,EAAA,IAAAC,KAAAR,GAGA,OAAAI,EAAA,IAFAG,EAAAE,iBAAAzB,EAAAuB,EAAAG,cAAA,GAAA1B,EAAAuB,EAAAI,cAEA,IADA3B,EAAAuB,EAAAK,eAAA5B,EAAAuB,EAAAM,iBAAA7B,EAAAuB,EAAAO,iBACAR,ECJmBS,CAAepB,EAAAqB,KAAArB,EAAAsB,cAClC,WAAAC,KAAA,CAAAvB,GAAAG,EAAA,CACAF,KAAAD,EAAAC,OAGA,OAAAD,KAKIL,EAEJ,SAAA6B,GAGA,SAAAC,EAAAC,EAAAC,QACA,IAAAA,IACAA,EAAA,CACAC,aAAA,KAIA,IAAAC,EAAAL,EAAAM,KAAAC,KAAAL,EAAAC,IAAAI,KAsBA,OApBAF,EAAAG,aAAA,SAAAC,GAKA,IAAAC,EAAAD,EAAAC,cAEA,GAAAA,KAAAtC,MAAA,CACA,IAAAuC,EAAA,IAAAD,EAAAE,MAAAC,OAA8DD,EAAA,EAAeE,iBAAoBF,EAAA,EAAeG,WAChHC,EAAyB9C,EAAqBwC,EAAAtC,OAAAG,IAAA,SAAAC,GAC9C,OACAA,OACAyC,OAAAN,KAIAN,EAAAa,cAAAC,mBAAAH,KAIAX,EA6BA,OA5DEe,EAAA,UAAiBnB,EAAAD,GAkCnBC,EAAAoB,UAAAC,SAAA,WACA,OAAWF,EAAA,UAAiBb,UAAA,oBAC5B,OAAaa,EAAA,YAAmBb,KAAA,SAAAgB,GAChC,OAAAA,EAAAC,OACA,OACA,SAEcC,EAAA,GAEd,OAKA,OAJAF,EAAAG,OAEAnB,KAAAoB,aACAC,SAAAC,iBAAA,QAAAtB,KAAAC,cAAA,GACA,UAQAP,EAAAoB,UAAAM,WAAA,WACAC,SAAAE,oBAAA,QAAAvB,KAAAC,eAGAP,EA7DA,CA8DE8B,EAAA,qCClFFhE,EAAAC,EAAAC,EAAA,sBAAA+D,IAAA,IAAAC,EAAAlE,EAAA,KAYOiE,EAAmBC,EAAA,UAT1B,aAAAL,SAAAM,WACAC,QAAAC,UAGA,IAAAD,QAAA,SAAAC,GACAC,OAAAR,iBAAA,OAAAO,KAIyCD,QAAAC","file":"static/js/@atlaskit-internal_media-picker-clipboard.a5d9ccbc.chunk.js","sourcesContent":["var padZero = function padZero(n) {\n  return n < 10 ? \"0\" + n : \"\" + n;\n};\n\nexport var appendTimestamp = function appendTimestamp(fileName, timestamp) {\n  var dotPosition = fileName.lastIndexOf('.');\n  var containsDot = dotPosition > 0;\n  var fileNameWithoutExtension = containsDot ? fileName.substring(0, dotPosition) : fileName;\n  var extension = containsDot ? fileName.substring(dotPosition) : '';\n  var date = new Date(timestamp);\n  var formattedDate = \"\" + date.getUTCFullYear() + padZero(date.getUTCMonth() + 1) + padZero(date.getUTCDate());\n  var formattedTime = \"\" + padZero(date.getUTCHours()) + padZero(date.getUTCMinutes()) + padZero(date.getUTCSeconds());\n  return fileNameWithoutExtension + \"-\" + formattedDate + \"-\" + formattedTime + extension;\n};","import * as tslib_1 from \"tslib\";\nimport { LocalUploadComponent } from './localUpload';\nimport { whenDomReady } from '../util/documentReady';\nimport { appendTimestamp } from '../util/appendTimestamp';\nimport { LocalFileSource } from '../service/types';\nexport var getFilesFromClipboard = function getFilesFromClipboard(files) {\n  return Array.from(files).map(function (file) {\n    if (file.type.indexOf('image/') === 0) {\n      var name_1 = appendTimestamp(file.name, file.lastModified);\n      return new File([file], name_1, {\n        type: file.type\n      });\n    } else {\n      return file;\n    }\n  });\n};\n\nvar ClipboardImpl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ClipboardImpl, _super);\n\n  function ClipboardImpl(context, config) {\n    if (config === void 0) {\n      config = {\n        uploadParams: {}\n      };\n    }\n\n    var _this = _super.call(this, context, config) || this;\n\n    _this.pasteHandler = function (event) {\n      /*\n        Browser behaviour for getting files from the clipboard is very inconsistent and buggy.\n        @see https://extranet.atlassian.com/display/FIL/RFC+099%3A+Clipboard+browser+inconsistency\n      */\n      var clipboardData = event.clipboardData;\n\n      if (clipboardData && clipboardData.files) {\n        var fileSource_1 = clipboardData.types.length === 1 ? LocalFileSource.PastedScreenshot : LocalFileSource.PastedFile;\n        var filesArray = getFilesFromClipboard(clipboardData.files).map(function (file) {\n          return {\n            file: file,\n            source: fileSource_1\n          };\n        });\n\n        _this.uploadService.addFilesWithSource(filesArray);\n      }\n    };\n\n    return _this;\n  }\n\n  ClipboardImpl.prototype.activate = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , whenDomReady];\n\n          case 1:\n            _a.sent();\n\n            this.deactivate();\n            document.addEventListener('paste', this.pasteHandler, false);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ClipboardImpl.prototype.deactivate = function () {\n    document.removeEventListener('paste', this.pasteHandler);\n  };\n\n  return ClipboardImpl;\n}(LocalUploadComponent);\n\nexport { ClipboardImpl };","import * as exenv from 'exenv'; // https://gist.github.com/dragosh/e9baf2d7bf3673a98c91\n\nvar checkDomReady = function checkDomReady() {\n  if (document.readyState === 'complete') {\n    return Promise.resolve();\n  }\n\n  return new Promise(function (resolve) {\n    window.addEventListener('load', resolve);\n  });\n};\n\nexport var whenDomReady = exenv.canUseDOM ? checkDomReady() : Promise.resolve();"],"sourceRoot":""}