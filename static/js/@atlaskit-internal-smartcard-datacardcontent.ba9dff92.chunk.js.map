{"version":3,"sources":["../node_modules/@atlaskit/smart-card/view/CardWithData/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","CardWithDataContent","tslib__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","_atlaskit_media_ui__WEBPACK_IMPORTED_MODULE_2__","_atlaskit_media_ui__WEBPACK_IMPORTED_MODULE_3__","_extractors_inline__WEBPACK_IMPORTED_MODULE_4__","_extractors_block__WEBPACK_IMPORTED_MODULE_5__","_super","apply","this","arguments","prototype","render","_a","props","data","isSelected","appearance","onClick","Object"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,wCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,MAAAQ,EAAAR,EAAA,MAAAS,EAAAT,EAAA,MAAAU,EAAAV,EAAA,MAMAI,EAEA,SAAAO,GAGA,SAAAP,IACA,cAAAO,KAAAC,MAAAC,KAAAC,YAAAD,KAuBA,OA1BER,EAAA,UAAiBD,EAAAO,GAMnBP,EAAAW,UAAAC,OAAA,WACA,IAAAC,EAAAJ,KAAAK,MACAC,EAAAF,EAAAE,KACAC,EAAAH,EAAAG,WACAC,EAAAJ,EAAAI,WACAC,EAAAL,EAAAK,QAEA,iBAAAD,EACaf,EAAA,cAAoBC,EAAA,EAAwBF,EAAA,SAAgB,GAAKkB,OAAAd,EAAA,EAAAc,CAA4BJ,GAAA,IAAW,CACrHC,aACAE,aAGahB,EAAA,cAAoBE,EAAA,EAAuBH,EAAA,SAAgB,GAAKkB,OAAAb,EAAA,EAAAa,CAA2BJ,GAAA,IAAW,CACnHC,aACAE,cAKAlB,EA3BA,CA4BEE,EAAA","file":"static/js/@atlaskit-internal-smartcard-datacardcontent.ba9dff92.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BlockCardResolvedView, InlineCardResolvedView } from '@atlaskit/media-ui';\nimport { extractInlinePropsFromJSONLD } from '../../extractors/inline';\nimport { extractBlockPropsFromJSONLD } from '../../extractors/block';\n\nvar CardWithDataContent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CardWithDataContent, _super);\n\n  function CardWithDataContent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CardWithDataContent.prototype.render = function () {\n    var _a = this.props,\n        data = _a.data,\n        isSelected = _a.isSelected,\n        appearance = _a.appearance,\n        onClick = _a.onClick;\n\n    if (appearance === 'inline') {\n      return React.createElement(InlineCardResolvedView, tslib_1.__assign({}, extractInlinePropsFromJSONLD(data || {}), {\n        isSelected: isSelected,\n        onClick: onClick\n      }));\n    } else {\n      return React.createElement(BlockCardResolvedView, tslib_1.__assign({}, extractBlockPropsFromJSONLD(data || {}), {\n        isSelected: isSelected,\n        onClick: onClick\n      }));\n    }\n  };\n\n  return CardWithDataContent;\n}(React.Component);\n\nexport { CardWithDataContent };"],"sourceRoot":""}